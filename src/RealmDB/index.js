import Realm from 'realm';
class LogInCredentials extends Realm.Object { }
class HomeDates extends Realm.Object { }
class Questions extends Realm.Object { }
class QuestionImages extends Realm.Object { }
class Columns extends Realm.Object { }
// class rooms extends Realm.Object { }


LogInCredentials.schema = {
  name: 'LogInCredentials',
  properties: {
    userName:'string',
    password:'string',
    currentUser:{type: 'string?[]'},
    authenticate:{type: 'string?[]'},
  },
};
HomeDates.schema = {
  name: 'HomeDates',
  // primaryKey: 'id',
  properties: {
    // id:    'int',
    appointments:     {type: 'string?[]'},
  },
};
Columns.schema = {
  name: 'Columns',
  // primaryKey: 'id',
  properties: {
    // id:    'int',
    ColumnsData:     {type: 'string?[]'},
  },
};
Questions.schema = {
  name: 'Questions',
  // primaryKey: 'id',
  properties: {
    // id:    'int',
    questions:     {type: 'string?[]'},
  },
};

QuestionImages.schema = {
  name: 'QuestionImages',
  // primaryKey: 'id',
  properties: {
    questionId:    'int',
    image:     {type: 'string'},
    name:     {type: 'string'},
    key:     {type: 'string'},
    clientId:     {type: 'string'},
    userId:     {type: 'string'},
    CCCSOACTION:     {type: 'string'},
    uploaded:     {type: 'int'},
  },
};

// houses.schema = {
//   name: 'houses',
//   primaryKey: 'id',
//   properties: {
//     id:    'int', // autogenerated id
//     houseName: "string",
//     room:     {type: 'list', objectType: 'rooms'},
//   },
// };
// rooms.schema = {
//   name: 'rooms',
//   primaryKey: 'id',
//   properties: {
//     id: 'int', //autogenerated id
//     name:     'string',
//     // cars:     {type: 'list', objectType: 'Car'},
//   }
// };
// house_images.schema = {
//   name: 'house_images',
//   properties: {
//     images:{

//       type: 'string'
//     },
//     // house_id: {
//     //   type: 'string',
//     // },

  // },
// };


export const personRef = new Realm({
  schema: [HomeDates,LogInCredentials,Questions,QuestionImages,Columns],
  schemaVersion:5
});


const CarSchema = {
  name: 'Car',
  properties: {
    make:  'string',
    model: 'string',
    miles: {type: 'int', default: 0},
  }
};
const PersonSchema = {
  name: 'Person',
  properties: {
    name:     'string',
    birthday: 'date',
    cars:     'Car[]', // a list of Cars
    picture:  'data?'  // optional property
  }
};
const CarSchema2 = {
  name: 'Car',
  properties: {
    make:  'string',
    model: 'string',
    miles: {type: 'int', default: 0},
  }
};
const PersonSchema2 = {
  name: 'Person',
  properties: {
    name:     'string',
    cars:     {type: 'list', objectType: 'Car'},
  }
};


// let john = realm.create('Person', {name: 'John', cars: []});
// john.cars.push({make: 'Honda',  model: 'Accord', miles: 1500});
// john.cars.push({make: 'Toyota', model: 'Prius',  miles: 2780});

// Query realm for all instances of the "Task" type.
// const tasks = realm.objects("Task");


// let filteredTasks = tasks.filtered("status = 'Open');
// console.log(`filtered tasks: ${JSON.stringify(filteredTasks, null, 2)}\n`);


// realm.write(() => {
//   // Delete the task from the realm.
//   realm.delete(task);
//   // Discard the reference.
//   task = null;
// });




// Define the function for deleting a task.
// const deleteTask = (task) => {
//   const projectRealm = realmRef.current;
//   projectRealm.write(() => {
//     projectRealm.delete(task);
//     setTasks([...projectRealm.objects("Task").sorted("name")]);
//   });
// };
